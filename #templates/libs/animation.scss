  // Анимация ====================================================================================================//
	//https://html5book.ru/css3-transition/

	//! Анимация кнопки ====================================================================================================//
//Подборка анимаций кнопок https://msiter.ru/articles/60-klassnykh-knopok-na-css-s-animaciey
.button {
	position: relative;
	background-color: #007397;
	span {
		z-index: 2;// Текст кнопки завернуть в спан и навесить z-index
	}
	&::after {
		content: "";
		width: 0;
		height: 100%;
		left: 50%;
		top: 0;
		position: absolute;
		transition: all 0.3s ease 0s;
		background-color: #006688;
	}
	&:hover {
		&::after {
			left: 0;
			width: 100%;
		}
	}
}

//! Нижнее подчеркивание при наведении =================================================================//

	.menu-link {
		position: relative;
		&::after{
			content: "";
			position: absolute;
			left: 50%;
			width: 0;
			height: 1px;
			background-color: #007397;
			bottom: 0;
			transition: all 0.3s ease 0s;
		}
		&:hover{
			color: #007397;
			&::after {
				left: 0;
				width: 100%;
			}
		}
	}

	
// ! ====================================================================================================//
//* CSS3-переходы =======================================================================================//

//? transition-property содержит название CSS-свойств, к которым будет применен эффект перехода
	//none	Отсутствие свойства для перехода.
	//all	Значение по умолчанию. Применяет эффект перехода ко всем свойствам элемента.
	//свойство	Определяет список CSS-свойств, перечисленных через запятую, участвующих в переходе.
	//initial	Устанавливает значение свойства в значение по умолчанию.
	//inherit	Наследует значение свойства от родительского элемента.

//? transition-duration время перехода указывается в секундах или миллисекундах, например, 2s или 5ms.
	//initial	Устанавливает значение свойства в значение по умолчанию.
	//inherit	Наследует значение свойства от родительского элемента.
	
//? transition-timing-function функция перехода
	//ease				Функция по умолчанию, переход начинается медленно, разгоняется быстро и замедляется в конце. Соответствует cubic-bezier(0.25,0.1,0.25,1).
	//linear			Переход происходит равномерно на протяжении всего времени, без колебаний в скорости. Соответствует cubic-bezier(0,0,1,1).
	//ease-in			Переход начинается медленно, а затем плавно ускоряется в конце. Соответствует cubic-bezier(0.42,0,1,1).
	//ease-out		Переход начинается быстро и плавно замедляется в конце. Соответствует cubic-bezier(0,0,0.58,1).
	//ease-in-out	Переход медленно начинается и медленно заканчивается. Соответствует cubic-bezier(0.42,0,0.58,1).
	//cubic-bezier(x1, y1, x2, y2)	Позволяет вручную установить значения от 0 до 1 для кривой ускорения. На этом сайте вы сможете построить любую траекторию перехода.
	//initial			Устанавливает значение свойства в значение по умолчанию.
	//inherit			Наследует значение свойства от родительского элемента.

//?Задержка перехода transition-delay
	//время	Время задержки перехода указывается в секундах или миллисекундах.
	//initial	Устанавливает значение свойства в значение по умолчанию.
	//inherit	Наследует значение свойства от родительского элемента.

//?Краткая запись перехода. Все свойства, отвечающие за изменение внешнего вида элемента, можно объединить в одно свойство transition
	//transition: transition-property transition-duration transition-timing-function transition-delay;
	//div {transition: all 1s ease 0s;}

//?Плавный переход нескольких свойств
//	Для элемента можно задать несколько последовательных переходов, перечислив их через запятую.
//	Каждый переход можно оформить своей временной функцией.
//	div {transition: background 0.3s ease, color 0.2s linear;}
//	или
//	div {
//	transition-property: height, width, background-color;
//	transition-duration: 3s;
//	transition-timing-function: ease-in, ease, linear;
//	}

//* CSS анимация ====================================================================================================//
/*
CSS анимация (CSS animation & @keyframes)  https://fls.guru/cssanimation.html

Что такое CSS анимация?
Как и CSS свойство плавных переходов transition, свойство animation призвано сделать нашу верстку более динамичной, 
оживить её для лучшего взаимодействия с пользователем и создания WOW эффекта.
Но в отличие от CSS переходов, создание анимации базируется на ключевых кадрах @keyframes, 
которые позволяют автоматически воспроизводить и повторять эффекты на протяжении заданного времени, а также приостанавливать анимацию по определенному событию.
Другими словами, использование конструкции animation и @keyframes позволяет нам создавать более сложные сценарии анимаций.

Animation-name Определяет список применяемых к элементу анимаций (ключевых кадров). Можно указать через запятую. Причем приоритет у последней записи.
	animation-name: circle; Связываем селектор animation__circle с ключевыми кадрами circle.
	animation-name: none;   Отменяем анимацию селектора animation__circle.

Animation-duration Отвечает за продолжительность анимации.
	animation-duration: 1s;          Переход будет длиться 1 секунду
	animation-duration: 2.5s;      Переход будет длиться 2.5 секунды
	animation-duration: 500ms; Переход будет длиться 500 миллисекунд

Animation-timing-function Задаёт сценарий развития анимации между ключевыми кадрами.
	animation-timing-function: ease;              Переход начинается медленно, разгоняется быстро и замедляется в конце.
	animation-timing-function: ease-in;         Переход начинается медленно, а затем плавно ускоряется в конце.
	animation-timing-function: ease-out;      Переход начинается быстро и плавно замедляется в конце.
	animation-timing-function: ease-in-out; Переход медленно начинается и медленно заканчивается.
	animation-timing-function: linear;            Переход происходит равномерно на протяжении всего времени, без колебаний в скорости.
	animation-timing-function: steps(2,start) Временная функция позволяет разбить анимацию на чёткое количество шагов указанных в int. 
Так же можно задать момент выполнения: Start – означает, что при начале анимации нужно сразу применить первое изменение. 
End - означало бы, что изменения нужно применять не в начале, а в конце каждого шага.
	
Animation-iteration-count Отвечает за повтор проигрывания ключевых кадров.
	animation-iteration-count: 1;             Ключевые кадры проиграются 1 раз.
	animation-iteration-count: 3;             Ключевые кадры проиграются 3 раза.
	animation-iteration-count: infinite; Ключевые кадры будут проигрываться бесконечно.

Animation-direction Определяет направление и тип проигрывания ключевых кадров.
	animation-direction: normal;     Ключевые кадры проиграются так, как они написаны.
	animation-direction: reverse;    Кадры будут проигрываться в обратном порядке.
	animation-direction: alternate; Каждый чётный проход по кадрам будет проигрываться в обратном порядке.
	animation-direction: alternate-reverse; Каждый нечётный проход по кадрам будет проигрываться в обратном порядке.

Animation-play-state Позволяет запускать или останавливать анимацию по событию.
	nimation-play-state: running;   Анимация проигрывается.
	animation-play-state: paused; При наведении анимация на паузе.

Animation-delay Отвечает за задержку перед проигрыванием.
	nimation-delay: 0s;    Задержки нет.
	animation-delay: 1s; Задержка 1 секунда.
	animation-delay: 200ms; Задержка 200 миллисекунд.

Animation-fill-mode Определяет какие значения анимируемых css свойств применятся к объекту после завершения анимации.
	animation-fill-mode: none; Завершится.
	animation-fill-mode: forwards;
	animation-fill-mode: backwards; 
	animation-fill-mode: both;
*/