/* https://git-scm.com/book/en/v2
https://www.youtube.com/watch?v=W4hoc24K93E&list=PLDyvV36pndZFHXjXuwA_NywNrVQO0aQqb&index=1
"" ковычки нужны если коммит состоит из более одного слова
Коммиты неизменяемы но можно откатиться и заменить на другой
HEAD @ Краткая запись Репозитория HEAD (текущая вершина ветки)
~ назад
В Powershel для @ нужны ""
Untracked files Файл не отслеживается (нужен git add)
Changes to be committed Файл подготовлен к коммиту
Changes not staged for commit Файл не подготовленн для сохранения ()
cat .git/ORIG_HEAD Вэтом файле хранится коммит с которого откатились последний раз

//* Терминал ============//

~ Корневая папка
pwd (print working dirrectory) Посмотреть полный путь
cd (change directory) Переход в папку
cd ~/Desktop Перейти на рабочий стол (из любого места)
cd ~\ Домашняя дирректория
.. Назад
../.. Назад на 2 уровня
history Показать последние 1000 команд
code . открыть папку в редакторе

ls Список файлов в папке
mkdir (make dirrectory) Создать папку
touch (имя файла) Создать файл
echo "(содержимое файла)" > (имя файла) Создать файл с содержимым
cp (имя файла) (куда) (если задать имя, то переименуется) Скопировать файл (если в указанной папке уже есть файл с таким именем - он будет перезаписан)
cp -r (путь к папке) (путь к новому месту) Скопировать папку
mv (имя файла) (куда) (если задать имя, то переименуется) Перенести файл (если в указанной папке уже есть файл с таким именем - он будет перезаписан)
mv -r (путь к папке) (путь к новому месту) Перенести папку
mv (имя файла) (имя файла) Переименовать файл
cat (имя файла) Прочитать содержимое файла
nano (имя файла) Изменить содержимое файла
vim (имя файла) Изменить содержимое файла
rm Удалить файл (rm * Удалит все файлы)
rm -r Удалить папку (rm * Удалит все папки)

code . Открыть папку в редакторе VSCode
git remote -v Показать ссылку на репозиторий
git remote Проверить наличие удаленных серверов
git remote add origin https://github.com/Wlad199/testGit.git Связать локальный удаленный (ссылку взять в GitHub)
git push -u origin main Создать ветку main на удаленке и отправить в нее локалку
git pull скачать обновления с локалки

//  ============//


git init Это создает новый подкаталог с именем .git
git config -h Список команд и описание
git help (config) подробная информация
:/ Поиск
:n Поиск вперед
:shift + n Поиск назад
:q Выход из листалки

//* Base ============//

git status (git status -s) Узнать статус
git diff Узнать статус более подробно. git diff само по себе это не показывает все изменения, внесенные с момента вашего последнего коммита — только изменения, которые еще не установлены.
git diff --staged. Эта команда сравнивает ваши подготовленные изменения с вашим последним коммитом
git diff --cached чтобы посмотреть, что вы подготовили на данный момент (--staged и --cached являются синонимами)

git add Hачать отслеживание нового файла
git add -p (file) Сохранить только часть изменений документа
git add -f (file) Добавить файл из .gitignore
git reset (имя файла) Убрать из индекса указанный файл

git commit Создать коммит
git commit -m "описание коммита"  Создать коммит
git commit -m 'описание коммита' index.html  Добавит только index.html даже если подготовлены другие.
git commit -am 'описание коммита'  Создать коммит, пропустив git add -a игнорирует новые файлы (сначала надо добавить новый фойл в отслеживаемые)
git show Показать текущий коммит

git rm Удалить файл
git rm -r Удалить папку из дирректории и добавляет изменение в индекс (rm = r + add scr) (Выдаст ошибку если не сохранены последние изменения)
git rm -r --cached src Удалит из индекс, но оставит в каталоге (--cached означает работа с индексом, не с каталогом) (для случаев когда не хотят больше следить за папкой/файлом)
git rm -f (file) Удалить, игнорируя все предупреждения (незакомиченные сохранения пропадут)

git mv old new Переименовать и добавить информ об этом в index


//* Branch ============//

git branch Просмотр веток
git branch -v Просмотр веток и коммита
git branch (name branch) Создать новую ветку
git branch -f (name branch) (адрес коммита) Перенести ветку на другой коммит (Нельзя сделать, находясь на этой же ветке)
git branch -f (name branch) (name branch) Перенести ветку на другую ветку (будет общий коммит)
git branch -m (new name branch) Переименовать текущую ветку
git branch -d Удалить ветку (возможно только находясь в другой ветке)

git stash Собирает незакомиченные изменения, удаляет из файла и архивирует в git
git stash pop Возвращает удаленное с помощью git stash

git checkout (name branch) Переключиться на ветку
git checkout -b (name branch) Создать ветку и переключиться на неё
git checkout -f (name branch)  Переключиться на ветку, игнорируя несохраненный код
git checkout -f Откатиться до последнего коммита в данной ветке
git checkout -B (name branch) (адрес коммита) Перенести ветку на другой коммит и переместиться на нее. (Как git branch -f а потом git checkout)
git checkout Перейти в указанный коммит. (Состояние оторванного HEAD (вне веток!!!))
git checkout -  Переключиться на предыдущую ветку

git checkout (адрес коммита) (имя файла) Перенести состояние указанного файла в текущую ветку (откатить) (Обновленный файл сразу попадает в индекс!!!)
git checkout HEAD (имя файла) Откатить файл до последнего коммита в данной ветке
git checkout (имя файла) Если путь указан, а коммит нет, то checkout возвращает в рабочую область файл из индекса

//? Просмотр коммитов ============//

git log (имя файла) Показать коммиты в ветке
git log --oneline Показать коммиты в ветке более компактно
git log --oneline -q Показать коммиты и переходы с ветки на ветку в ветке более компактно

git show (адрес коммита) или (ветка) показать коммит (по умолчанию HEAD)
git show --quiet то же самое, но меньше инфо
git show HEAD~ Предпоследний коммит
git show @~~ Предпредпоследний коммит (Вместо HEAD @)
git show @~3 3 коммита назад (Вместо HEAD @)
git show @~2:(имя файла) Помсотреть что было в файле 2 коммита назад
git show (:имя файла) Помсотреть проиндексированный файл
git show :/(слово из описания коммита) Поиск коммита по любому слову (Найдет самый свежий) (Ветка неважна)

//? Слияние ============//

git merge (имя ветки которую вливают в текущую) Слияние веток. Нужно находиться в основной (cat .git/ORIG_HEAD Папка с коммитом перед слиянием слияния)
git branch -f (имя ветки в которую вливали) ORIG_HEAD Откатить слияние
git checkout -B (имя ветки) (имя ветки) Слияние веток как в git merge. (-B  создает ветку, если её нет и затем переключает на неё.)
git branch -d Удалить ветку (возможно только после слияния)
git branch -D Удалить ветку (Игнорируя отсутствие слияния)

//? Восстановление ветки ============//

git reflog (имя ветки) История переключения веток (для HEAD если не указать имя)
git reflog --date=iso Вывести с датой (iso - стандарт)
git branch fix HEAD@{2} Восстановить ветку fix (Взять в reflog последний её коммит и создать заново)
git branch fix HEAD@{'2023-09-14 11:25:45 +0300'} Восстановить ветку fix (По дате)
git checkout -  Вернуться на предыдущую ветку (git checkout @{-1})

//? Очистка проекта и Сброс ============//

		Мягкий ресет перемещает только ветку.
		Жесткий сбрасывает еще и дирректорию и индекс (полный переход).
		Смешенный - передвигает ветку, сбрасывает индекс, но не трогает дирректорию (Mixed - по умолчанию)
git checkout -f (имя файла) Откатиться до последнего коммита в данной ветке (И сбросит индекс) (без имени файла - откатить всю дирректорию)
git clean -dxf Удаление только неотслеживаемых файлов и дирректорий (-d удалить не только флаги но и дирректории. -x удалить файлы которые игнорируются из-за gitignore. -f игнорировать предупреждения)
git reset @~ Откатиться на 1 коммить назад
git reset --hard (коммит) Откатиться к указанному коммиту (При жестком ресет все назакоммиченные изменения пропадут)
		cat .git/ORIG_HEAD Вэтом файле хранится коммит с которого откатились последний раз
git reset --hard ORIG_HEAD Вернуться на коммит с которого откатывался
git reset --mixed Среднее между --hard и --soft : Передвигает ветку, сбрасывает индекс, но не трогает рабочую дирректорию
git reset --soft @~2 (git reset --soft ORIG_HEAD) Откатиться назад (2) (мягкий ресет) (отмененные изменения попадут в индекс)(версии файлов остаются такими же как и в версии с которой ушли)(Часто используется для переписывания неудачных коммитов)
git commit -c ORIG_HEAD Создать коммит с описанием коммита с которого откатились (предидущая вершина ветки)(-с Описание можно поправить. -С Не менять описание)
git commit --amend -m (новый коммит) Перезаписать последний коммит (старый исчезнет из ветки)
git reset @~ Откатить назад (git reset --mixed по умолчанию) (индекс сбросится)
git reset Очистить индекс (Тоже самое: git reset HEAD)
git reset (имя файла) Убрать файл из индекса (Антико для команды git add)
git reset (адресс коммита) (имя файла) Файл обновится до версии указанного коммита (!!! Изменения попадут только в индекс!!! НЕ В ДИРРЕКТОРИЮ !!!)(git checkout предпочтительней, тк он добавит и в индекс и в дирректорию)

//? Сравнение коммитов ============//
git diff игнорирует неотслеживаемые файлы

git diff (имя ветки) (имя ветки) Выведет различия в файлах из веток
git diff (коммит) (коммит) Сравнить коммиты
git diff master...fix Показывает изменения в ветке fix с момента ответвления ветки fix от ветки master (Отличия второго коммита от общего предка)

git diff Покажет различия с индесом (сравнит дирректорию с индексом (Показывает непроиндексированные изменения))
git diff HEAD (или @) Покажет изменения с момента последнего коммита (сравнит дирректорию с HEAD)
git diff (коммит) Сравнивает рабочую дирректорию с момтоянием проекта на момент этого коммита
git diff --cached (или тоже самое: git diff --staged) Сравнивает индекс и HEAD (!!! Не рабочую дирректорию а индекс с HEAD)
git diff --cached (коммит) (или тоже самое: git diff --staged (коммит)) Сравнивает индекс и коммит
git commit -v Покажет что войдет в коммит

git diff (имя файла) Покажет изменения в файле
git diff . Покажет изменения во всей дирректории
git diff master feature index.html Отличия в вайле index.html в ветках master и feature
git diff --name-only (имя ветки) (имя ветки) Покажет имена файлов в которых есть изменения

//? Форматирование коммитов ============//

git log --oneline Просмотр коммитов в компактном режиме
git log -p Просмотр коммитов вместе с изменениями
git log (имя ветки) Коммиты указанной ветки
git log master..fix Показать все коммиты fix с с мента отхождения от master
git log ..fix (или то же: git log HEAD..fix) Показать изменения в fix с момента отхождения от ветки HEAD
git log fix.. Изменения HEAD в которой нет fix (исключить fix и общие коммиты fix и master)
git log (имя файла или дирректории) Покажет коммиты, в которых менялся файл/дирректория

git log --grep (слово из названия коммита) Найдет все коммиты с таким словом в названии (Толтко в ветке HEAD. Для других веток нужно указать название ветки git log --grep (слово) (имя ветки))
git log --grep (слово№1) --grep (слово№2) Найдет все коммиты с такими словоми в названии (Или первое слово или второе)
git log --grep (слово№1) --grep (слово№2) --all-match Найдет все коммиты с такими словоми в названии (Только те где есть оба слова)

git log -G(код из файла) Найдет коммит где были изменения данного кода
git log -G(код из файла) -p Найдет коммит где были изменения данного кода (-p Выведет сами изменения)
git log -G(код из файла) -p script.js Как в прошлом примере но с ограничением по файлу

git log -L Поиск внутри объекта
git log -L 3,6:index.html Поиск в index.html с 3 по 6 строку
git log -L '/<head>/','/<\/head>/':index.html Поиск в index.html всех коммитов, в которых были изменения в теге head

